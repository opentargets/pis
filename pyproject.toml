[tool.poetry]
name = "platform-input-support"
version = "24.2.5"
description = "Open Target's Platform Input Support Application"
authors = ["Open Targets core team"]
license = "Apache-2.0"
readme = "README.md"
exclude = ["**/*_test.py"]

[tool.poetry.dependencies]
python = "^3.12"
elasticsearch = "==7.17.6"        # must be ^7.0.0 to be compatible with chembl es server
elasticsearch-dsl = "==7.4.1"
filelock = "^3.15.4"
google-cloud-storage = "==2.17.0"
jq = "^1.7.0"
loguru = "==0.7.2"
pydantic = "^2.8.2"
PyYAML = "==6.0.1"
requests = "^2.32.3"
urllib3 = "<=2"                   # must be <= 2 for elasticsearch

[tool.poetry.group.test.dependencies]
poetry = "^1.8.3"
coverage = "^7.6.0"
freezegun = "^1.5.1"
pytest = "==8.2.2"
pytest-mock = "^3.14.0"

[tool.poetry.group.dev.dependencies]
ruff = "==0.5.2"
deptry = "^0.16.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
pis = "platform_input_support.core:main"
platform_input_support = "platform_input_support.core:main"

[tool.pytest.ini_options]
testpaths = ["platform_input_support"]
filterwarnings = "ignore:.*google._upb*" # warning from google protobuf library

[tool.coverage.report]
omit = ["**/*_test.py"]
exclude_lines = ["pragma: no cover", "if TYPE_CHECKING:"]

[tool.deptry]
extend_exclude = ["[0-9a-zA-Z_/]+_test.py"]

[tool.ruff]
target-version = 'py312'
line-length = 120

[tool.ruff.format]
quote-style = 'single'

[tool.ruff.lint]
preview = true

select = [
  'E',      # pycodestyle
  'F',      # pyflakes
  'N',      # pep8-naming
  'Q',      # flake8-quotes
  'RUF',    # ruff
  'UP',     # pyupgrade
  'D',      # pydocstyle
  'D212',   # flake8-docstrings
  'S',      # flake8-bandit
  'C4',     # flake8-comprehensions
  'INT',    # flake8-gettext
  'LOG',    # flake8-logging
  'G',      # flake8-logging-format
  'I',      # isort
  'ICN001', # flake8-import-conventions
  'B',      # flake8-bugbear
  'A001',   # flake8-builtins
  'COM',    # flake8-commas
  'T10',    # flake8-debugger
  'T20',    # flake8-todo
  'EXE',    # flake8-executable
  'ISC',    # flake8-implicit-str-concat
  'PIE',    # flake8-pie
  'PT',     # flake8-pytest-style
  'RSE',    # flake8-raise
  'RET504', # flake8-return
  'SIM',    # flake8-simplify
  'TID',    # flake8-tidy-imports
  'PGH',    # pygrep-hooks
  'PL',     # pylint
  'TRY',    # tryceratops
  'PERF',   # perflint
  'FURB',   # refurb
  'W',      # pycodestyle
]

ignore = [
  'D1',      # we are missing many docstrings
  'D213',    # we prefer D212
  'G004',    # we don't care about logging format
  'E226',    # allow omitting whitespace around arithmetic operators
  'E731',    # allow assigning lambdas (it's useful for single-line functions defined inside other functions)
  'RUF012',  # ultra-noisy and dicts in classvars are very common
  'RUF015',  # not always more readable
  'UP038',   # it looks kind of weird and it slower than a tuple
  'S101',    # we use asserts outside tests, and do not run python with `-O` (also see B011)
  'S311',    # false positives, it does not care about the context
  'S324',    # all our md5/sha1 usages are for non-security purposes
  'S404',    # useless, triggers on *all* subprocess imports
  'S403',    # there's already a warning on using pickle, no need to have one for the import
  'S405',    # we don't use lxml in unsafe ways
  'S603',    # useless, triggers on *all* subprocess calls: https://github.com/astral-sh/ruff/issues/4045
  'S607',    # we trust the PATH to be sane
  'B011',    # we don't run python with `-O` (also see S101)
  'B904',    # possibly useful but too noisy
  'COM812',  # trailing commas on multiline lists are nice, but we have 2.5k violations
  'PIE807',  # `lambda: []` is much clearer for `load_default` in schemas
  'PT004',   # pretty weird + not a pytest convention: https://github.com/astral-sh/ruff/issues/8796
  'PT005',   # ^ likewise
  'PT011',   # very noisy
  'PT015',   # nice for tests but not so nice elsewhere
  'PT018',   # ^ likewise
  'S301',    # we trust our pickled data
  'SIM102',  # sometimes nested ifs are more readable
  'SIM103',  # sometimes this is more readable (especially when checking multiple conditions)
  'SIM105',  # try-except-pass is faster and people are used to it
  'SIM108',  # noisy ternary
  'SIM114',  # sometimes separate ifs are more readable (especially if they just return a bool)
  'SIM117',  # nested context managers may be more readable
  'PLC0415', # local imports are there for a reason
  'PLC2701', # some private imports are needed
  'PLR09',   # too-many-<whatever> is just noisy
  'PLR0913', # very noisy
  'PLR2004', # extremely noisy and generally annoying
  'PLR6201', # sets are faster (by a factor of 10!) but it's noisy and we're in nanoseconds territory
  'PLR6301', # extremely noisy and generally annoying
  'PLW0108', # a lambda often makes it more clear what you actually want
  'PLW1510', # we often do not care about the status code of commands
  'PLW1514', # we expect UTF8 environments everywhere
  'PLW1641', # false positives with SA comparator classes
  'PLW2901', # noisy and reassigning to the loop var is usually intentional
  'TRY002',  # super noisy, and those exceptions are pretty exceptional anyway
  'TRY003',  # super noisy and also useless w/ werkzeugs http exceptions
  'TRY300',  # kind of strange in many cases
  'TRY301',  # sometimes doing that is actually useful
  'TRY400',  # not all exceptions need exception logging
  'PERF203', # noisy, false positives, and not applicable for 3.11+
  'FURB113', # less readable
  'FURB140', # less readable and actually slower in 3.12+
]

extend-safe-fixes = [
  'RUF005',  # we typically don't deal with objects overriding `__add__` or `__radd__`
  'C4',      # they seem pretty safe
  'UP008',   # ^ likewise
  'D200',    # ^ likewise
  'D400',    # ^ likewise
  'PT014',   # duplicate test case parametrizations are never intentional
  'RSE102',  # we do not use `raise func()` (with `func` returning the exception instance)
  'RET504',  # looks pretty safe
  'SIM110',  # ^ likewise
  'PERF102', # ^ likewise
]

[tool.ruff.lint.extend-per-file-ignores]
'tests/**/test_*.py' = ['S108', 'S602']
'**/__init__.py' = ['F401']

[tool.ruff.lint.flake8-quotes]
inline-quotes = 'single'
multiline-quotes = 'double'
docstring-quotes = 'double'
avoid-escape = true

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false
parametrize-names-type = 'tuple'
parametrize-values-type = 'list'
parametrize-values-row-type = 'tuple'

[tool.ruff.lint.pydocstyle]
convention = "pep257"
